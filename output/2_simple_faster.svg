<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="230.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Chart</text>
<text id="details" x="10.00" y="213" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="213" > </text>
<g id="frames">
<g >
<title>large (2,149 samples, 15.26%)</title><rect x="1009.9" y="133" width="180.1" height="31.0" fill="rgb(206,148,47)" rx="2" ry="2" />
<text  x="1012.89" y="151.5" >large</text>
</g>
<g >
<title>genericpath (166 samples, 1.18%)</title><rect x="536.3" y="37" width="13.9" height="31.0" fill="rgb(246,220,12)" rx="2" ry="2" />
<text  x="539.26" y="55.5" ></text>
</g>
<g >
<title>_abc (47 samples, 0.33%)</title><rect x="309.0" y="69" width="3.9" height="31.0" fill="rgb(210,83,41)" rx="2" ry="2" />
<text  x="311.96" y="87.5" ></text>
</g>
<g >
<title>stat (326 samples, 2.32%)</title><rect x="490.0" y="69" width="27.3" height="31.0" fill="rgb(211,77,6)" rx="2" ry="2" />
<text  x="493.00" y="87.5" >s..</text>
</g>
<g >
<title>all (14,079 samples, 100%)</title><rect x="10.0" y="165" width="1180.0" height="31.0" fill="rgb(233,97,6)" rx="2" ry="2" />
<text  x="13.00" y="183.5" ></text>
</g>
<g >
<title>io (684 samples, 4.86%)</title><rect x="255.6" y="133" width="57.3" height="31.0" fill="rgb(251,170,38)" rx="2" ry="2" />
<text  x="258.57" y="151.5" >io</text>
</g>
<g >
<title>_frozen_importlib_external (537 samples, 3.81%)</title><rect x="18.7" y="133" width="45.0" height="31.0" fill="rgb(225,19,38)" rx="2" ry="2" />
<text  x="21.72" y="151.5" >_fro..</text>
</g>
<g >
<title>_codecs (60 samples, 0.43%)</title><rect x="154.2" y="69" width="5.0" height="31.0" fill="rgb(234,58,21)" rx="2" ry="2" />
<text  x="157.16" y="87.5" ></text>
</g>
<g >
<title>abc (341 samples, 2.42%)</title><rect x="284.3" y="101" width="28.6" height="31.0" fill="rgb(253,83,3)" rx="2" ry="2" />
<text  x="287.32" y="119.5" >abc</text>
</g>
<g >
<title>_signal (99 samples, 0.70%)</title><rect x="219.8" y="133" width="8.3" height="31.0" fill="rgb(248,28,22)" rx="2" ry="2" />
<text  x="222.78" y="151.5" ></text>
</g>
<g >
<title>_locale (71 samples, 0.50%)</title><rect x="327.6" y="101" width="5.9" height="31.0" fill="rgb(233,52,24)" rx="2" ry="2" />
<text  x="330.57" y="119.5" ></text>
</g>
<g >
<title>os (2,655 samples, 18.86%)</title><rect x="440.0" y="101" width="222.6" height="31.0" fill="rgb(243,117,48)" rx="2" ry="2" />
<text  x="443.04" y="119.5" >os</text>
</g>
<g >
<title>encodings.utf_8 (217 samples, 1.54%)</title><rect x="201.6" y="133" width="18.2" height="31.0" fill="rgb(247,104,7)" rx="2" ry="2" />
<text  x="204.60" y="151.5" ></text>
</g>
<g >
<title>small (2,791 samples, 19.82%)</title><rect x="776.0" y="133" width="233.9" height="31.0" fill="rgb(224,225,30)" rx="2" ry="2" />
<text  x="778.96" y="151.5" >small</text>
</g>
<g >
<title>__builtin__ (370 samples, 2.63%)</title><rect x="662.6" y="101" width="31.0" height="31.0" fill="rgb(236,210,47)" rx="2" ry="2" />
<text  x="665.57" y="119.5" >__..</text>
</g>
<g >
<title>_bootlocale (246 samples, 1.75%)</title><rect x="312.9" y="133" width="20.6" height="31.0" fill="rgb(211,190,31)" rx="2" ry="2" />
<text  x="315.90" y="151.5" ></text>
</g>
<g >
<title>encodings (1,645 samples, 11.68%)</title><rect x="63.7" y="133" width="137.9" height="31.0" fill="rgb(230,81,46)" rx="2" ry="2" />
<text  x="66.72" y="151.5" >encodings</text>
</g>
<g >
<title>encodings.aliases (506 samples, 3.59%)</title><rect x="159.2" y="101" width="42.4" height="31.0" fill="rgb(244,99,12)" rx="2" ry="2" />
<text  x="162.19" y="119.5" >enc..</text>
</g>
<g >
<title>posixpath (392 samples, 2.78%)</title><rect x="517.3" y="69" width="32.9" height="31.0" fill="rgb(242,37,24)" rx="2" ry="2" />
<text  x="520.32" y="87.5" >po..</text>
</g>
<g >
<title>encodings.latin_1 (328 samples, 2.33%)</title><rect x="228.1" y="133" width="27.5" height="31.0" fill="rgb(252,186,2)" rx="2" ry="2" />
<text  x="231.08" y="151.5" >e..</text>
</g>
<g >
<title>site (5,279 samples, 37.50%)</title><rect x="333.5" y="133" width="442.5" height="31.0" fill="rgb(214,19,48)" rx="2" ry="2" />
<text  x="336.52" y="151.5" >site</text>
</g>
<g >
<title>sitecustomize (983 samples, 6.98%)</title><rect x="693.6" y="101" width="82.4" height="31.0" fill="rgb(253,184,16)" rx="2" ry="2" />
<text  x="696.58" y="119.5" >sitecusto..</text>
</g>
<g >
<title>zipimport (104 samples, 0.74%)</title><rect x="10.0" y="133" width="8.7" height="31.0" fill="rgb(221,23,33)" rx="2" ry="2" />
<text  x="13.00" y="151.5" ></text>
</g>
<g >
<title>_collections_abc (1,341 samples, 9.52%)</title><rect x="550.2" y="69" width="112.4" height="31.0" fill="rgb(238,227,51)" rx="2" ry="2" />
<text  x="553.17" y="87.5" >_collections_..</text>
</g>
<g >
<title>time (710 samples, 5.04%)</title><rect x="950.4" y="101" width="59.5" height="31.0" fill="rgb(214,210,14)" rx="2" ry="2" />
<text  x="953.38" y="119.5" >time</text>
</g>
<g >
<title>_stat (62 samples, 0.44%)</title><rect x="512.1" y="37" width="5.2" height="31.0" fill="rgb(229,19,54)" rx="2" ry="2" />
<text  x="515.12" y="55.5" ></text>
</g>
<g >
<title>codecs (512 samples, 3.64%)</title><rect x="116.3" y="101" width="42.9" height="31.0" fill="rgb(225,95,29)" rx="2" ry="2" />
<text  x="119.27" y="119.5" >codecs</text>
</g>
</g>
</svg>
